{"version":3,"sources":["Villager.js","Village.js","Resources.js","Game.js","Calendar.js","firebase.js","App.js","index.js"],"names":["Villager","_ref","_clickedVillager$inve","createVillager","villagers","setResources","clickedVillager","setClickedVillager","useState","React","createElement","Fragment","className","map","villager","key","id","onClick","event","liClickHandler","name","job","inventory","item","quantity","handleSellAllGems","itemName","console","log","itemIndex","findIndex","goldEarned","prevResources","resource","type","Village","village","villagePopulation","villagePopulationLimit","villageName","Resources","cityResources","maxResources","resourceIcons","gold","food","wood","stone","index","charAt","toUpperCase","slice","Game","grid","setGrid","setVillagers","setVillage","setMaxResources","maxResourcesByLevel","villagersRef","selectedBuilding","setSelectedBuilding","clickedBuilding","setclickedBuilding","loopActive","useRef","townHallPlaced","setTownHallPlaced","buildingCount","isModalOpen","setModalOpen","availableVillagers","setAvailableVillagers","buildingIcons","setBuildingIcons","reference","icon","cost","level","resourceGainPerWorker","foodConsumptionPerWorker","canAfford","every","_ref2","find","res","deductResources","updatedResources","costItem","c","startGameLoop","current","lastUpdateTime","Date","now","loop","Object","entries","forEach","_ref3","buildingType","count","building","b","workers","v","push","length","findGems","addResources","requestAnimationFrame","handleCellClick","rowIndex","colIndex","cellData","placeItem","prevGrid","newGrid","coordinates","row","col","prevVillage","alert","amount","maxResource","newQuantity","Math","min","worker","random","villagerIndex","gemIndex","closeModal","useEffect","resources","hasFood","winCon","gender","villagerId","prevVillagers","updatedVillagers","assignedBuildingID","includes","error","hireVillager","_ref4","buildingSelecter","data-reference","cell","_buildingIcons$find","_ref5","openModal","filter","workerId","updatedBuildingIcons","townHall","upgradeCost","Counter","seconds","setSeconds","minutes","setMinutes","hours","setHours","timer","setInterval","prevSeconds","prevMinutes","prevHours","clearInterval","seconds1","String","padStart","minutes1","hours1","formatTime","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","App","startTime","setStartTime","hasReached5000","setHasReached5000","elapsedTimes","setElapsedTimes","docRef","doc","MaleNames","FemaleNames","Array","from","customID","villagerName","villagerGender","floor","newVillager","yearOfBirth","populationLimit","villageList","createVillage","resourceInitializer","async","docSnap","getDoc","exists","data","times","fetchTimes","unsubscribe","onSnapshot","goldResource","updateDoc","elapsedTime","setDoc","saveElapsedTimeToFirebase","time","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.f8516fcc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Villager.css';\r\n\r\n/*\r\n  - Create message when new villager is added\r\n  - Format the information of the villagers  \r\n*/\r\n\r\nconst Villager = ({ createVillager, villagers, setResources }) => {\r\n\r\n  const [clickedVillager, setClickedVillager] = useState(null)\r\n\r\n  function liClickHandler(event, villager) {\r\n    setClickedVillager(villager)\r\n  }\r\n\r\n  // Function to handle selling all gems\r\n  const handleSellAllGems = (villager, itemName) => {\r\n    console.log(`Trying to sell ${itemName} form ${villager.name}`)\r\n\r\n    const itemIndex = villager.inventory.findIndex(item => item.name === itemName)\r\n    const goldEarned = villager.inventory[itemIndex].quantity * 10 // Each gem is worth 10 gold\r\n\r\n    villager.inventory[itemIndex].quantity = 0\r\n    \r\n    setResources((prevResources) => \r\n      prevResources.map((resource) =>\r\n        resource.type === 'gold'\r\n          ? { ...resource, quantity: resource.quantity + goldEarned}\r\n          : resource\r\n    ))\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='villagerListTitle'>\r\n        <h1>Villagers</h1>        \r\n      </div>\r\n      <div>\r\n        <div className='villagerListGroup'>\r\n          <ul className='villagerListElements'>\r\n            {villagers && villagers.map((villager) => (\r\n              <li\r\n                key={villager.id}\r\n                onClick={(event) => liClickHandler(event, villager)}\r\n              >\r\n                {/* <img></img> */}\r\n                <span>{villager.name}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div className='villagerListDetails'>\r\n            {clickedVillager && (\r\n              <>\r\n                <div className='villagerListDetails-Name'>\r\n                  <h4>{clickedVillager.name}</h4>\r\n                </div>\r\n                <div className='villagerListDetails-Job'>\r\n                  {clickedVillager.job || \"Unemployed\"}\r\n                </div>\r\n                <div className='villagerListDetails-Inventory'>\r\n                  <ul className='villagerListDetails-Inventory-Inventory-List'>\r\n                    {clickedVillager?.inventory?.map((item) => (\r\n                      <li className='villagerListDetails-Inventory-Inventory-Item' key={item.id}>\r\n                        {item.name} {item.quantity}\r\n                        {item.name === 'gem' && (\r\n                          <button onClick={() => handleSellAllGems(clickedVillager, item.name)}>\r\n                            Sell All Gems\r\n                          </button>\r\n                        )}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Villager;","import React from 'react';\r\nimport './Village.css';\r\nimport './Villager.js';\r\n  \r\nconst Village = ({ village }) => {\r\n  \r\n  // Check if the village state is null\r\n  if (!village) {\r\n    return <div>Loading village...</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className='header'>\r\n\r\n            <div className='home'>\r\n                <h3>👥{village.villagePopulation}/{village.villagePopulationLimit}</h3>\r\n            </div>\r\n\r\n            <div className='title'>\r\n                <h3>Small Town</h3>\r\n            </div>\r\n            \r\n            <div className='contacts'>\r\n                <h3>{village.villageName}</h3>\r\n            </div>\r\n\r\n        </div>        \r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Village;","import React from 'react';\r\n  \r\nconst Resources = ({ cityResources, maxResources }) => {\r\n  \r\n    const resourceIcons = {\r\n        gold: '🪙',\r\n        food: '🍎',\r\n        wood: '🪵',\r\n        stone: '🪨',\r\n    };\r\n    \r\n    return (\r\n    <>\r\n        {cityResources && cityResources.map((resource, index) => (\r\n            <div\r\n                key={index}\r\n                className={`eventList-ResourceControlHud-${resource.type.charAt(0).toUpperCase() + resource.type.slice(1)}`}\r\n            >\r\n                <span>\r\n                {resourceIcons[resource.type]}: {resource.quantity}/{maxResources}\r\n                </span>\r\n            </div>\r\n        ))}\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Resources;","import React, { useState, useEffect, useRef } from 'react';\r\nimport './Game.css'\r\n\r\n//#region TODO:\r\n/*\r\n    - Fix grid height\r\n    - Create override so first building of each is free\r\n    - Tweak cost\r\n    - Create some objectives for player to complete\r\n    - Create Gameloop\r\n    - Create Workplaces in each building so the villagers have something to do\r\n    - Develop the behaviour of each building\r\n*/\r\n//#endregion\r\n\r\nconst Game = ({ grid, setGrid, cityResources, setResources, villagers, setVillagers, setVillage, createVillager, maxResources, setMaxResources, maxResourcesByLevel, villagersRef }) => {\r\n\r\n    //#region Variables\r\n    // State for Selected building\r\n    const [selectedBuilding, setSelectedBuilding] = useState(null)\r\n    const [clickedBuilding, setclickedBuilding] = useState({})\r\n    const loopActive = useRef(false); // Indicates if the game loop is running\r\n    const [townHallPlaced, setTownHallPlaced] = useState(false);\r\n\r\n    // Tracks the number of each building type\r\n    const buildingCount = useRef({});\r\n\r\n    // Hire Vilaggers modal\r\n    const [isModalOpen, setModalOpen] = useState(false); // Modal toggle\r\n    const [availableVillagers, setAvailableVillagers] = useState([]); // Villagers to display\r\n\r\n    //#endregion\r\n\r\n    //#region Building Icons\r\n    const [buildingIcons, setBuildingIcons] = useState ([\r\n        { reference: \"Town Hall\", icon: '🏛️',\r\n            cost: [\r\n                {type: 'gold', quantity: 10},\r\n                {type: 'wood', quantity: 10},\r\n                {type: 'stone', quantity: 10},\r\n            ],\r\n            level: 1\r\n        },\r\n        { reference: \"House\", icon: '🏠',\r\n            cost: [\r\n                {type: 'gold', quantity: 20},\r\n                {type: 'wood', quantity: 20},\r\n                {type: 'stone', quantity: 20},\r\n            ]\r\n        },\r\n        { reference: \"Lumberjack\", icon: '🪓',\r\n            cost: [\r\n                {type: 'gold', quantity: 10},\r\n                {type: 'wood', quantity: 10},\r\n                {type: 'stone', quantity: 0},\r\n            ],\r\n            resourceGainPerWorker: 2,\r\n            foodConsumptionPerWorker: 1\r\n        },\r\n        { reference: \"Miner\", icon: '⛏️',\r\n            cost: [\r\n                {type: 'gold', quantity: 10},\r\n                {type: 'wood', quantity: 10},\r\n                {type: 'stone', quantity: 10},\r\n            ],\r\n            resourceGainPerWorker: 2,\r\n            foodConsumptionPerWorker: 1\r\n        },\r\n        { reference: \"Farm\", icon: '🌾',\r\n            cost: [\r\n                {type: 'gold', quantity: 5},\r\n                {type: 'wood', quantity: 10},\r\n                {type: 'stone', quantity: 5},\r\n            ]  ,\r\n            resourceGainPerWorker: 2,\r\n            foodConsumptionPerWorker: 1         \r\n        },        \r\n    ]);\r\n    //#endregion\r\n\r\n    //#region Functions\r\n    function buildingSelecter(reference) {\r\n        const building = buildingIcons.find((b) => b.reference === reference)\r\n        if (!building) return;\r\n\r\n        if (canAfford(building.cost)) {\r\n            setSelectedBuilding(building)\r\n            //console.log(`${building.reference} selected!`)\r\n        }\r\n    }\r\n\r\n    const canAfford = (cost) => {\r\n        return cost.every(({ type, quantity }) => {\r\n            const resource = cityResources.find((res) => res.type === type);\r\n            return resource && resource.quantity >= quantity;\r\n        })\r\n    }\r\n\r\n    const deductResources = (cost) => {\r\n        const updatedResources = cityResources.map((resource) => {\r\n            const costItem = cost.find((c) => c.type === resource.type);\r\n            if (costItem) {\r\n                return { ...resource, quantity: resource.quantity - costItem.quantity };\r\n            }\r\n            return resource;\r\n        });\r\n        setResources(updatedResources);\r\n        //console.log(\"After deducted resources: \", cityResources)\r\n    }\r\n\r\n    const placeItem = (rowIndex, colIndex) => {\r\n        if (!selectedBuilding) {\r\n            alert('No building selected!');\r\n            return;\r\n        }\r\n    \r\n        if (grid[rowIndex][colIndex].type !== 'empty') {\r\n            alert('This cell is already occupied!');\r\n            return;\r\n        }\r\n    \r\n        // Only 1 town Hall allowed\r\n        if (selectedBuilding.reference === 'Town Hall') {\r\n            if (townHallPlaced) {\r\n                // console.log(\"You can only place one Town Hall!\");\r\n                return;\r\n            }      \r\n                // console.log(\"Placing Town Hall...\");\r\n                setTownHallPlaced(true); // Update the state to true\r\n        } // else console.log(`Placing ${selectedBuilding.reference}`);\r\n        \r\n        // Ensure resources are sufficient\r\n        if (canAfford(selectedBuilding.cost)) {        \r\n\r\n            // Deduct resources\r\n            deductResources(selectedBuilding.cost);\r\n\r\n            // Update the grid to include the placed building\r\n            setGrid((prevGrid) => {\r\n                const newGrid = [...prevGrid];\r\n                newGrid[rowIndex][colIndex] = {\r\n                    type: selectedBuilding.reference,\r\n                    id: `${rowIndex}-${colIndex}`,\r\n                    workers: [],\r\n                    coordinates: { row: rowIndex, col: colIndex }\r\n                }\r\n                return newGrid;\r\n            });\r\n            //console.log(`${selectedBuilding.reference} placed at [${rowIndex}, ${colIndex}]`);\r\n            \r\n            if (selectedBuilding.reference === 'House') {\r\n                // console.log(\"Placed a house\")\r\n                setVillage((prevVillage) => ({\r\n                    ...prevVillage,\r\n                    villagePopulationLimit: prevVillage.villagePopulationLimit + 2\r\n                }))\r\n                createVillager(villagers.length + 1)\r\n                createVillager(villagers.length + 2)\r\n                \r\n                \r\n            }\r\n\r\n            buildingCount.current[selectedBuilding.reference] = (buildingCount.current[selectedBuilding.reference] || 0) + 1;\r\n            if (!loopActive.current) startGameLoop(); // Ensure game loop is running\r\n\r\n        } else {\r\n            alert('Not enough resources to place this building!');\r\n        }\r\n    };\r\n\r\n    const startGameLoop = () => {\r\n        //console.log(\"Starting a loop\")\r\n        loopActive.current = true;\r\n        let lastUpdateTime = Date.now(); // Tracks the last update time\r\n\r\n        const loop = () => {\r\n            //console.log(\"In loop\")\r\n            if (!loopActive.current) return; // Stop the loop if inactive\r\n\r\n            const now = Date.now();\r\n            const elapsedTime = (now - lastUpdateTime) / 1000; // Time in seconds\r\n\r\n            if (elapsedTime >= 1) {                \r\n\r\n                Object.entries(buildingCount.current).forEach(([buildingType, count]) => {\r\n                    const building = buildingIcons.find(b => b.reference === buildingType)\r\n                    if (!building) return\r\n\r\n                    //console.log(\"villagersRef.current: \", villagersRef.current)\r\n                    let workers = []\r\n\r\n                    villagersRef.current.forEach((v) => {\r\n                        if (v.job) workers.push(v)\r\n                    })\r\n\r\n                    if (workers.length > 0) {\r\n\r\n                        findGems(workers)\r\n\r\n                        switch (buildingType) {\r\n                            case \"Lumberjack\":\r\n                                addResources(\"wood\", workers.length * building.resourceGainPerWorker);         // Getting wood/s\r\n                                addResources(\"food\", workers.length * -building.foodConsumptionPerWorker);     // Consuming food/s\r\n                                break;\r\n                            case \"Miner\":\r\n                                addResources(\"stone\", workers.length * building.resourceGainPerWorker);        // Getting stone/s\r\n                                addResources(\"food\", workers.length * -building.foodConsumptionPerWorker);     // Consuming food/s\r\n                                break;\r\n                            case \"Farm\": \r\n                                addResources(\"food\", workers.length * building.resourceGainPerWorker);         // Getting stone/s\r\n                                addResources(\"food\", workers.length * -building.foodConsumptionPerWorker);     // Consuming food/s\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                lastUpdateTime = now;                \r\n\r\n            }\r\n\r\n            requestAnimationFrame(loop); // Schedule next frame   \r\n        };\r\n        \r\n        loop()                 \r\n    };\r\n\r\n    const handleCellClick = (rowIndex, colIndex) => {\r\n        const cellData = grid[rowIndex][colIndex]\r\n\r\n        if (cellData.type === 'empty') {\r\n            placeItem(rowIndex, colIndex)\r\n        } else {\r\n            setclickedBuilding(cellData)\r\n        }\r\n    }\r\n\r\n    function upgradeLevel() {\r\n        const updatedBuildingIcons = [...buildingIcons]\r\n        const townHall = updatedBuildingIcons.find(building => building.reference === 'Town Hall')\r\n\r\n        if (!townHall) {\r\n            console.log(\"Town Hall not found\")\r\n            return\r\n        }\r\n\r\n        const upgradeCost = [\r\n            { type: 'gold', quantity: maxResources},\r\n            { type: 'wood', quantity: maxResources},\r\n            { type: 'stone', quantity: maxResources},\r\n        ]\r\n\r\n        if (canAfford(upgradeCost)) {\r\n            console.log(\"Can afford\")\r\n            \r\n            deductResources(upgradeCost)\r\n            \r\n            townHall.level += 1\r\n            \r\n            setMaxResources(townHall.level * maxResourcesByLevel)\r\n            setBuildingIcons(updatedBuildingIcons)\r\n\r\n        } else console.log(\"Can't afford\")\r\n    }\r\n    //#endregion\r\n\r\n    //#region Resource Management\r\n    const addResources = (type, amount) => {\r\n        \r\n        // Find the current value of maxResources, capped by the town hall level\r\n        const maxResource = maxResources || maxResourcesByLevel * buildingIcons.find(b => b.reference === 'Town Hall').level;\r\n\r\n        setResources((prevResources) => \r\n            prevResources.map((resource) => {\r\n                if (resource.type === type) {\r\n                    const newQuantity = resource.quantity + amount\r\n\r\n                    return {\r\n                        ...resource,\r\n                        quantity: Math.min(newQuantity, maxResource)\r\n                    }\r\n                }\r\n                return resource\r\n            })\r\n        )\r\n\r\n        // // console.log(`Adding ${amount} of ${type}`);\r\n        // setResources((prevResources) =>\r\n        //     prevResources.map((resource) =>\r\n        //         resource.type === type\r\n        //             ? { ...resource, quantity: resource.quantity + amount }\r\n        //             : resource\r\n        // ));\r\n    };\r\n\r\n    function hasFood(resources) {\r\n\r\n        if (!resources) {\r\n            //console.log(\"Resources are undefined\");\r\n            return true\r\n        }\r\n\r\n        const food = resources.find(resource => resource.type === 'food');\r\n        //console.log(\"Checking food in hasFood:\", food);\r\n        return food && food.quantity > 0;\r\n    }\r\n\r\n    const findGems = (workers) => {\r\n        // console.log(\"Trying to find some gems\")\r\n\r\n        const gemChance = 0.9;\r\n\r\n        workers.forEach((worker) => {\r\n            if (worker.job === 'Miner') {\r\n                // console.log(`${worker.name} attempting to find a gem`)\r\n\r\n                if (Math.random() < gemChance) {\r\n                    // console.log(`${worker.name} found a gem`)\r\n\r\n                    const villagerIndex = villagersRef.current.findIndex(v => v.id === worker.id)\r\n                    if (villagerIndex !== -1) {\r\n                        const villager = villagersRef.current[villagerIndex]\r\n\r\n                        // Update inventory in villagerRef\r\n                        const gemIndex = villager.inventory.findIndex(item => item.name === 'gem')\r\n                        if (gemIndex !== -1) {\r\n                            villager.inventory[gemIndex].quantity += 1\r\n                        } else {\r\n                            villager.inventory.push({ name: \"gem\", quantity: 1 })\r\n                        }\r\n                    }\r\n                } // else console.log(`${worker.name} did not find a gem`)\r\n            }\r\n        })\r\n\r\n        // Only update villagers if we've made changes\r\n        setVillagers([...villagersRef.current])\r\n        // console.log(\"Find gems villagers: \", villagersRef.current)\r\n    };\r\n\r\n    function winCon (resources) {\r\n\r\n        if (!resources) {\r\n            //console.log(\"Resources are undefined\");\r\n            return false\r\n        }\r\n\r\n        const gold = resources.find(resource => resource.type === 'gold');\r\n        // console.log(\"Checking gold in winCon:\", gold.quantity);\r\n        // console.log(gold && gold.quantity >= 500);\r\n        return gold && gold.quantity >= 5000;\r\n    }\r\n    //#endregion\r\n\r\n\r\n    //#region Modal\r\n    const openModal = () => {  \r\n        setAvailableVillagers(villagers.filter(villager => villager.job === null))\r\n        setModalOpen(true);  // Open the modal window\r\n    };\r\n\r\n    const closeModal = () => setModalOpen(false);\r\n\r\n    const hireVillager = (villagerId) => {\r\n        //console.log(\"Hiring Villager: \", villagerId);\r\n\r\n        // setVillagers((prevVillagers) =>\r\n        //     prevVillagers.map((villager) =>\r\n        //         villager.id === villagerId ? {\r\n        //             ...villager,\r\n        //             job: clickedBuilding.type,\r\n        //             assignedBuildingID: clickedBuilding.id\r\n        //             } : villager\r\n        //     )\r\n        // );\r\n\r\n        setVillagers((prevVillagers) => {\r\n            const updatedVillagers = prevVillagers.map((villager) => \r\n                villager.id === villagerId\r\n                ? { ...villager, job: clickedBuilding.type, assignedBuildingID: clickedBuilding.id }\r\n                : villager\r\n            )\r\n\r\n            villagersRef.current = updatedVillagers\r\n\r\n            return updatedVillagers\r\n        })\r\n        \r\n        console.log(\"Updated villagers via ref:\", villagersRef.current)\r\n        \r\n        if (clickedBuilding.coordinates) {\r\n            const { row, col } = clickedBuilding.coordinates\r\n         \r\n            setGrid((prevGrid) => {\r\n                const newGrid = [...prevGrid]\r\n                \r\n                // Ensure workers array is defined\r\n                const building = newGrid[row][col]\r\n                if (!building.workers) building.workers = []\r\n\r\n                // Add the villager only if they're not already in the list\r\n                if (!building.workers.includes(villagerId)) building.workers.push(villagerId)\r\n                \r\n                return newGrid\r\n            })\r\n        } else console.error(\"Building coordinates are missing\")\r\n\r\n        alert(`Villager ${villagerId} Hired`)\r\n        closeModal();\r\n    };\r\n    \r\n    //#endregion\r\n\r\n    useEffect(() => {\r\n        //console.log(\"Updated cityResources: \", cityResources);\r\n\r\n        if (!hasFood(cityResources)) {\r\n            alert(\"Game Over\")\r\n            loopActive.current = false\r\n            return\r\n        }\r\n\r\n        if (winCon(cityResources)) {            \r\n            loopActive.current = false\r\n            return\r\n        }\r\n        \r\n    }, [cityResources]);\r\n\r\n    useEffect(() => {        \r\n        return () => {\r\n            // Clean up on unmount\r\n            loopActive.current = false;\r\n        };\r\n    }, []);\r\n\r\n    //#region JSX\r\n    return (\r\n        <>\r\n            {isModalOpen && (\r\n            <div className=\"modal-overlay\">\r\n                <div className=\"modal-content\">\r\n                    <h2>Hire a Villager</h2>\r\n                    <ul>\r\n                        {availableVillagers.map(villager => (\r\n                            <li key={villager.id}>\r\n                                {villager.name} ({villager.gender})\r\n                                <button onClick={() => hireVillager(villager.id)}>Hire</button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                    <button onClick={closeModal} className=\"close-button\">Close</button>\r\n                </div>\r\n            </div>\r\n            )}\r\n            <div className='game-BuildingMenu'>\r\n                {buildingIcons.map(({reference, icon, cost}) => (\r\n                    <div\r\n                    key={reference}\r\n                    className={`game-BuildingMenu-Icon ${selectedBuilding === reference ? 'selected' : ''}`}\r\n                    onClick={(event) => buildingSelecter(reference)}\r\n                    data-reference={`${reference}`} // Tooltip data\r\n                    >\r\n                        <span>{icon}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"grid\">                \r\n                {grid.map((row, rowIndex) => (\r\n                    <div key={`row-${rowIndex}`} className=\"row\">\r\n                        {row.map((cell, colIndex) => (\r\n                            <div\r\n                                key={`${rowIndex}-${colIndex}`}\r\n                                className={`cell ${cell.type !== 'empty' ? 'occupied' : 'empty'}`}\r\n                                onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                            >\r\n                                {buildingIcons.find(({ reference }) => reference === cell.type)?.icon || ''}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"game-SelectedBuilding\">\r\n                {clickedBuilding && clickedBuilding.type ? (                \r\n                    <div className=\"game-SelectedBuilding-Content\">\r\n                        <div className=\"game-SelectedBuilding-Content-Title\">\r\n                            {clickedBuilding.type}\r\n                        </div>\r\n                        {clickedBuilding.type !== 'House' && clickedBuilding.type !== 'Town Hall' ? (\r\n                            <>\r\n                                <div className=\"game-SelectedBuilding-Content-Buttons\">\r\n                                    <button onClick={openModal}>Hire a Villager</button>\r\n                                </div>\r\n                                <div className='game-SelectedBuilding-Content-Workers'>\r\n                                    <h3>Assigned Workers</h3>\r\n                                    {clickedBuilding.workers && clickedBuilding.workers.length > 0 ? (\r\n                                        <ul>\r\n                                            {clickedBuilding.workers.map(workerId => {\r\n                                                const worker = villagers.find(v => v.id === workerId)\r\n                                                return <li key={workerId}>{worker?.name || 'Unknown Worker'}</li>\r\n                                            })}\r\n                                        </ul>\r\n                                    ) : (\r\n                                        <p>No workers assigned</p>\r\n                                    )}\r\n                                </div>\r\n                            </>\r\n                        ) : clickedBuilding.type === 'Town Hall' ? (\r\n                            <div className='game-SelectedBuilding-Content-TownHall'>\r\n                                <span> - Level {buildingIcons.find(b => b.reference === 'Town Hall').level}</span>\r\n                                <button onClick={upgradeLevel}>Upgrade level</button>\r\n                                <p>Cost {maxResources}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <p>+2 Villagers</p>\r\n                        )}\r\n                    </div>                \r\n                ) : null }\r\n            </div>\r\n        </>\r\n    );\r\n    //#endregion\r\n}\r\n\r\nexport default Game","import React, { useState, useEffect } from \"react\";\r\n//import \"./Calendar.css\"\r\n\r\nconst Counter = () => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [hours, setHours] = useState(0);\r\n  /*\r\n  const [days, setDays] = useState(0);\r\n  const [months, setMonths] = useState(0);\r\n  const [years, setYears] = useState(0);*/\r\n\r\n  let secondsOfMinutes = 60;\r\n  let minutesOfHour = 60;\r\n\r\n  /*let daysOfMonth = 2;\r\n  let monthsOfYear = 1;*/\r\n\r\n  useEffect(() => {\r\n    // Set up the timer to increment seconds every second\r\n    const timer = setInterval(() => {\r\n      setSeconds((prevSeconds) => {\r\n        if (prevSeconds === secondsOfMinutes) {\r\n          // Increment minutes and reset seconds\r\n          setMinutes((prevMinutes) => {\r\n            if (prevMinutes === minutesOfHour) {\r\n\r\n              // increment hours and reset minutes \r\n              setHours((prevHours) => prevHours + 1);\r\n              return 0; // Reset minutes to 0\r\n\r\n            }\r\n            return prevMinutes + 1; // Increment minutes\r\n          });\r\n          return 0; // Reset seconds to 0\r\n        }\r\n        return prevSeconds + 1; // Increment seconds\r\n      });\r\n    }, 1000);\r\n\r\n    // Cleanup the timer when the component unmounts\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  function formatTime () {\r\n\r\n    let seconds1 = String(seconds).padStart(2,\"0\");\r\n    let minutes1 = String(minutes).padStart(2,\"0\");\r\n    let hours1 = String(hours).padStart(2,\"0\");\r\n    //let months1 = String(months).padStart(2,\"0\");\r\n    //let years1 = String(years).padStart(2,\"0\");\r\n    \r\n    return (\r\n        <div>\r\n          {hours1}:{minutes1}:{seconds1}\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\n  return (\r\n    <div className=\"stopwatch\">\r\n        <div className=\"display\">{formatTime()}</div>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default Counter;\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDnrGEbzBojCAXl9NA94bCQAt8Zt-zm8Pw\",\r\n  authDomain: \"small-town-422d3.firebaseapp.com\",\r\n  projectId: \"small-town-422d3\",\r\n  storageBucket: \"small-town-422d3.firebasestorage.app\",\r\n  messagingSenderId: \"1028795159542\",\r\n  appId: \"1:1028795159542:web:03f8d31e275a9ad581add7\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst db = getFirestore(app);\r\n\r\nexport { db };\r\n","import './App.css';\nimport Village from './Village'\nimport Villager from './Villager';\nimport Resources from './Resources';\nimport Game from './Game';\nimport Counter from './Calendar';\nimport React, { useState, useEffect, useRef } from 'react';\n\n\n// FIREBASE\nimport { doc, setDoc, getDoc, updateDoc, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"./firebase\";\n\n//#region TODO:\n/*\n  - Verify if resource type already exists in list and Add to it\n  - Get Male and Female names from API\n*/\n//#endregion\n\nexport default function App() {\n\n  //FIREBASE\n  const [startTime, setStartTime] = useState(Date.now());\n  const [hasReached5000, setHasReached5000] = useState(false);\n  const [elapsedTimes, setElapsedTimes] = useState([]); // To store the times fetched from Firestore\n  const docRef = doc(db, \"gameData\", \"elapsedTimes\"); // Firebase document reference\n\n\n\n  //#region Variables\n  // useState\n  const [village, setVillage] = useState(null)\n  const [villagers, setVillagers] = useState([]);\n  const [cityResources, setResources] = useState(null)\n  const [maxResources, setMaxResources] = useState()\n  const maxResourcesByLevel = 1000\n  const villagersRef = useRef(villagers)\n\n  // Arrays for dinamic villagers\n  const MaleNames = [ 'John', 'Mark', 'Carl' ]\n  const FemaleNames = [ 'Charlotte', 'Amelia', 'Violet' ]\n\n  // Grid\n  const gridSize = 18;\n  const [grid, setGrid] = useState(Array.from({ length: gridSize }, () => Array.from({ length: gridSize }, () => ({ type: 'empty' }))));\n  //#endregion\n\n  //#region Village functions\n  // Function to create new Village\n  const createVillage = function(populationLimit) {\n    // New Village properties\n    const newVillage = {\n      villageName: \"My Village\",\n      villageList: villagers,\n      villagePopulation: 0,\n      villagePopulationLimit: populationLimit,\n      resources: cityResources\n    }\n\n    setVillage(newVillage)\n  };\n  //#endregion\n\n  //#region Villager functions\n  // Function to create a new Villager\n  const createVillager = function(customID) {\n    \n    let villagerGender = Math.floor(Math.random() * 2)\n    let villagerName\n\n    if (villagerGender === 0) {\n      // if 0 is male\n      villagerName = MaleNames[Math.floor(Math.random() * MaleNames.length)]\n      villagerGender = 'M'\n    } else if (villagerGender === 1) {\n      // if 1 is female\n      villagerName = FemaleNames[Math.floor(Math.random() * FemaleNames.length)]\n      villagerGender = 'F'\n    } else {\n      console.log(villagerGender)\n    }\n\n    const newVillager = {\n      id: customID || villagers.length + 1,\n      name: villagerName,\n      yearOfBirth: 2000,\n      job: null,\n      gender: villagerGender,\n      inventory: [],\n    }\n\n    console.log(\"Created new Villager\", newVillager)\n\n    setVillagers((prevVillagers) => {\n      const updatedVillagers = [...prevVillagers, newVillager]\n      villagersRef.current = updatedVillagers\n      return updatedVillagers\n    })\n\n    setVillage((prevVillage) => ({\n      ...prevVillage,\n      villagePopulation: prevVillage.villagePopulation + 1\n    }))\n  };\n\n  const testData = function() {\n    const defaultVillagers = [\n      {\n        id: 0,\n        name: \"John\",\n        yearOfBirth: 2000,\n        job: null,\n        gender: 'M',\n        inventory: [],        \n      },\n      {\n        id: 1,\n        name: \"Sarah\",\n        yearOfBirth: 2000,\n        job: null,\n        gender: 'F',\n        inventory: [],\n      }\n    ]\n\n    setVillagers(defaultVillagers)    \n    \n    setVillage((prevVillage) => ({\n      ...prevVillage,\n      villagePopulation: villagers.length + 2\n    }))\n\n  }\n\n  //#endregion\n\n  //#region Resources functions\n  // Resource initializer\n  const resourceInitializer = function () {\n  console.log(\"Resource Initializer\")\n\n    const resources = [\n      { type: \"gold\", quantity: 50 },\n      { type: \"food\", quantity: 50 },\n      { type: \"wood\", quantity: 50 },\n      { type: \"stone\", quantity: 50 },\n    ];\n\n    setResources(resources)\n  }\n\n  // const generateRandomResource = function () {\n  //   let type = Math.floor(Math.random() * 4)\n  //   let quantity = Math.floor(Math.random() * 100)\n\n  //   const resources = [ 'gold', 'food', 'wood', 'stone' ]\n\n  //   createResources(resources[type], quantity)\n  // }\n\n  // // Function to manage resources\n  // const createResources = function (type, quantity) {\n  //   // Find the resource matching the specified type\n  //   const resourceIndex = cityResources.findIndex(resource => resource.type === type);\n  \n  //   if (resourceIndex !== -1) {\n  //     // Copy the current resources array\n  //     const updatedResources = [...cityResources];\n  \n  //     // Update the quantity of the matching resource\n  //     updatedResources[resourceIndex] = {\n  //       ...updatedResources[resourceIndex],\n  //       quantity: updatedResources[resourceIndex].quantity + quantity,\n  //     };\n  \n  //     // Set the updated resources array\n  //     setResources(updatedResources);\n  //   } else {\n  //     console.error(`Resource of type \"${type}\" not found.`);\n  //   }\n  // };\n  //#endregion\n\n  // Call createVillage when the component mounts\n  useEffect(() => {\n    createVillage(2);\n    testData();\n    resourceInitializer();\n    setMaxResources(maxResourcesByLevel)\n  }, []);\n\n\n    /******************FIREBASE************************* */\n     // Fetch times from Firebase when the app loads\n     useEffect(() => {\n      const fetchTimes = async () => {\n        try {\n          const docSnap = await getDoc(docRef);\n          if (docSnap.exists()) {\n            setElapsedTimes(docSnap.data().times || []);\n          } else {\n            console.log(\"No times found in Firestore.\");\n          }\n        } catch (error) {\n          console.error(\"Error fetching times from Firestore:\", error);\n        }\n      };\n  \n      fetchTimes();\n  \n      // Real-time listener for changes to the times document\n      const unsubscribe = onSnapshot(docRef, (docSnap) => {\n        if (docSnap.exists()) {\n          setElapsedTimes(docSnap.data().times || []);\n        }\n      });\n  \n      return () => unsubscribe(); // Cleanup listener on component unmount\n    }, []);\n  \n    // Save elapsed time to Firebase\n    const saveElapsedTimeToFirebase = async (elapsedTime) => {\n      try {\n        const docSnap = await getDoc(docRef);\n        if (docSnap.exists()) {\n          await updateDoc(docRef, {\n            times: [...docSnap.data().times, elapsedTime],\n          });\n        } else {\n          await setDoc(docRef, { times: [elapsedTime] });\n        }\n        console.log(\"Time saved:\", elapsedTime);\n      } catch (error) {\n        console.error(\"Error saving elapsed time:\", error);\n      }\n    };\n  \n    // Track gold and save elapsed time when it reaches 5000\n    useEffect(() => {\n      if (cityResources) {\n        const goldResource = cityResources.find((resource) => resource.type === \"gold\");\n        if (goldResource && goldResource.quantity >= 5000) {\n          if (!hasReached5000) {\n            // alert(\"Won\")\n            const elapsedTime = (Date.now() - startTime) / 1000; // Time in seconds\n            saveElapsedTimeToFirebase(elapsedTime);\n            setStartTime(Date.now()); // Reset start time\n            setHasReached5000(true); // Mark as reached\n          }\n        } else {\n          setHasReached5000(false); // Reset when gold drops below 5000\n        }\n      }\n    }, [cityResources]);\n  \n  \n    /******************FIREBASE************************* */\n\n  // JSX elements\n  return (\n    <main>\n      <header>\n        <Village village={village}/>        \n      </header>\n\n      <body>\n      <div className='content'>\n        <div className='villagerListApp'>\n          <Villager createVillager={createVillager} villagers={villagers} setResources={setResources}/>\n        </div>\n\n        <div className='game'>\n          <Game \n            grid={grid}\n            setGrid={setGrid}\n            cityResources={cityResources}\n            setResources={setResources}\n            villagers={villagers}\n            setVillagers={setVillagers}\n            setVillage={setVillage}\n            createVillager={createVillager}\n            maxResources={maxResources}\n            setMaxResources={setMaxResources}\n            maxResourcesByLevel={maxResourcesByLevel}\n            villagersRef={villagersRef}\n          />          \n        </div>\n\n        <div className='eventList'>\n          <div className='eventList-Calendar'>\n            <Counter />\n          </div>\n          <div className='eventList-ResourceControlHud'>\n            <Resources cityResources={cityResources} maxResources={maxResources}/>\n          </div>\n          {/*<button onClick={generateRandomResource}>Create Resource</button>*/}\n          {/*  MOSTRAR OS TEMPOS*/}\n          <div className=\"eventList-Listing\">\n            <h3>Elapsed Times (seconds):</h3>\n            <ul>\n                {elapsedTimes.map((time, index) => (\n                <li key={index}>Time {index + 1}: {time}s</li>\n                ))}\n            </ul>\n          </div>\n          {/*******************/ }\n        </div>  \n      </div>\n      </body>\n    </main>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  //<React.StrictMode>\n    <App />\n  //</React.StrictMode>\n);\n"],"sourceRoot":""}